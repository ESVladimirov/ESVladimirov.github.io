{"version":3,"sources":["components/Todo.js","components/Todos.js","components/Card.js","components/Cards.js","components/Actions.js","App.js","reportWebVitals.js","index.js"],"names":["Todo","props","state","done","handleClick","bind","e","this","setState","updateTodos","id","todoId","label","className","type","defaultChecked","onClick","name","deleteTodo","React","Component","Todos","todos","placeholders","inputValue","handleChange","handleSubmit","updatedTodos","filter","todo","updateTodosInLocalStorage","event","target","value","preventDefault","convertedString","toString","toUpperCase","substring","toLowerCase","push","Date","now","updatedTodo","map","convertedTodos","onSubmit","onChange","placeholder","Math","floor","random","length","Card","cardName","updateCardNameInLocalStorage","currentData","JSON","parse","localStorage","getItem","updatedData","card","cardId","setItem","stringify","newData","editedCardName","deleteCard","data","Cards","cards","localStorageData","Nav","createCard","App","unshift","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.2d7c5132.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nexport default class Todo extends React.Component {\r\n    constructor(props) {\r\n      super(props);\r\n      this.props = props;\r\n      this.state = {\r\n          done: props.done,\r\n      }\r\n      this.handleClick = this.handleClick.bind(this);\r\n    }\r\n  \r\n    handleClick(e) {\r\n      let done = !this.state.done;\r\n      this.setState ({\r\n        done,\r\n      })\r\n      this.props.updateTodos({\r\n        id: this.props.todoId,\r\n        done\r\n      });\r\n    }\r\n  \r\n    render() {\r\n        let label;\r\n        if (this.state.done) {\r\n            label = (\r\n                <div className=\"Todo\" >\r\n                    <label className='checked label'>\r\n                        <input className='checkbox' type=\"checkbox\" defaultChecked onClick={this.handleClick}/>\r\n                        <span className='fake-checkbox'></span>\r\n                        <span className='fake-checkbox-text'>{this.props.name}</span>\r\n                    </label>\r\n                    <button className=\"deleteTodo\" onClick={() => {this.props.deleteTodo(this.props.todoId)}}>&times;</button>\r\n                </div>\r\n                \r\n            );\r\n        } else {\r\n            label = (\r\n                <div className=\"Todo\" >\r\n                    <label className='label'>\r\n                        <input className='checkbox' type=\"checkbox\" onClick={this.handleClick}/>\r\n                        <span className='fake-checkbox'></span>\r\n                        <span className='fake-checkbox-text'>{this.props.name}</span>\r\n                    </label>\r\n                    <button className=\"deleteTodo\" onClick={() => {this.props.deleteTodo(this.props.todoId)}}>&times;</button>\r\n                </div>\r\n                \r\n            );\r\n        }\r\n\r\n        return (\r\n            <li>\r\n                {label}\r\n            </li>\r\n        );\r\n    }\r\n  }","import React from 'react';\r\nimport Todo from './Todo';\r\n\r\nexport default class Todos extends React.Component {\r\n    constructor(props){\r\n      super(props);\r\n      this.props = props;\r\n      let todos = props.todos ? props.todos : [];\r\n      this.placeholders = ['Помыть кота', 'Покормить посуду', 'Вынести мусор', 'Отдохнуть', 'Поспать', 'Просунться', 'Придумать placeholder'];\r\n      this.state = {\r\n        todos,\r\n        inputValue: '',\r\n      }\r\n      \r\n      this.deleteTodo = this.deleteTodo.bind(this);\r\n      this.handleChange = this.handleChange.bind(this);\r\n      this.handleSubmit = this.handleSubmit.bind(this);\r\n      this.updateTodos = this.updateTodos.bind(this);\r\n    }\r\n\r\n    deleteTodo(todoId) {\r\n      let updatedTodos = this.state.todos.filter((todo) => todo.id !== todoId);\r\n      this.setState({\r\n        todos: updatedTodos\r\n      });\r\n      this.props.updateTodosInLocalStorage(updatedTodos);\r\n    }\r\n\r\n    handleChange(event) {\r\n      this.setState({\r\n        inputValue: event.target.value\r\n      });\r\n    }\r\n\r\n    handleSubmit(event) {\r\n      event.preventDefault();\r\n      if (!this.state.inputValue) {\r\n        return;\r\n      }\r\n      \r\n      let convertedString = this.state.inputValue[0].toString().toUpperCase() + this.state.inputValue.substring(1).toLowerCase();\r\n      let updatedTodos = this.state.todos;\r\n      updatedTodos.push({\r\n        id: Date.now(),\r\n        name: convertedString,\r\n        done: false\r\n      })\r\n\r\n      this.setState({\r\n        todos: updatedTodos,\r\n        inputValue: ''\r\n      });\r\n\r\n      this.props.updateTodosInLocalStorage(this.state.todos);\r\n    }\r\n\r\n    updateTodos(updatedTodo) {\r\n      let updatedTodos = this.state.todos.map((todo) =>  {\r\n        if (todo.id === updatedTodo.id) {\r\n          todo.done = updatedTodo.done;\r\n        }\r\n        return todo;\r\n      });\r\n      this.setState({\r\n        todos: updatedTodos\r\n      });\r\n      this.props.updateTodosInLocalStorage(updatedTodos);\r\n    }\r\n\r\n    render() {\r\n      let convertedTodos = this.state.todos.map((todo) => \r\n        <Todo key={todo.id.toString()} name={todo.name} done={todo.done} todoId={todo.id} deleteTodo={this.deleteTodo} updateTodos={this.updateTodos}/>\r\n      )\r\n      \r\n      return (\r\n        <div>\r\n          <ul className=\"Todos\">\r\n            {convertedTodos}\r\n          </ul>\r\n\r\n          <form onSubmit={this.handleSubmit}>\r\n            <input type=\"text\" className=\"addTodoInput\" value={this.state.inputValue} onChange={this.handleChange} placeholder={this.placeholders[Math.floor(Math.random() * this.placeholders.length)]}/> \r\n            <button className=\"addTodo\" type=\"submit\">+</button>\r\n          </form>\r\n        </div>\r\n        \r\n      );\r\n    }\r\n    \r\n  }","import React from 'react';\r\nimport Todos from './Todos';\r\nexport default class Card extends React.Component{\r\n    constructor(props){\r\n        super(props);\r\n        this.props = props;\r\n        this.state = {cardName: props.cardName};\r\n        this.updateTodosInLocalStorage = this.updateTodosInLocalStorage.bind(this);\r\n        this.updateCardNameInLocalStorage = this.updateCardNameInLocalStorage.bind(this);\r\n        this.handleChange = this.handleChange.bind(this);\r\n    }\r\n\r\n    updateTodosInLocalStorage(todos) {\r\n        let currentData = JSON.parse(localStorage.getItem('Cards'));\r\n        \r\n        if (currentData) {\r\n          let updatedData = currentData.map((card) => {\r\n            if (card.cardId === this.props.cardId) {\r\n              card.todos = todos;\r\n            }\r\n            return card;\r\n          })\r\n          \r\n          localStorage.setItem('Cards', JSON.stringify(updatedData));\r\n        } else {\r\n          let newData = [\r\n            {\r\n              cardId: this.props.cardId,\r\n              cardName: this.state.cardName,\r\n              todos,\r\n            }\r\n          ]\r\n          localStorage.setItem('Cards', JSON.stringify(newData));\r\n        }\r\n      }\r\n\r\n    updateCardNameInLocalStorage(editedCardName) {\r\n      let currentData = JSON.parse(localStorage.getItem('Cards'));\r\n        \r\n        if (currentData) {\r\n          let updatedData = currentData.map((card) => {\r\n            if (card.cardId === this.props.cardId) {\r\n              card.cardName = editedCardName;\r\n            }\r\n            return card;\r\n          })\r\n          \r\n          localStorage.setItem('Cards', JSON.stringify(updatedData));\r\n        } else {\r\n          let newData = [\r\n            {\r\n              cardId: this.props.cardId,\r\n              cardName: editedCardName,\r\n              todos: []\r\n            }\r\n          ]\r\n          localStorage.setItem('Cards', JSON.stringify(newData));\r\n        }\r\n    }\r\n\r\n    handleChange(event) {\r\n      this.setState({\r\n        cardName: event.target.value\r\n      })\r\n      \r\n      this.updateCardNameInLocalStorage(event.target.value);\r\n    }\r\n    render() {\r\n        return (\r\n            <div className=\"Card\">\r\n              <div className=\"Card-top\">\r\n                <div className=\"Card-top-title\">\r\n                  <input type=\"text\" className=\"cardName\" value={this.state.cardName} onChange={this.handleChange}></input>\r\n                </div>\r\n                <button onClick={() => this.props.deleteCard(this.props.cardId)} className='deleteCard'>&times;</button>\r\n                \r\n              </div>\r\n              <div className=\"Card-bot\">\r\n                <div className=\"Card-bot-content\">\r\n                  <Todos todos={this.props.data} updateTodosInLocalStorage={this.updateTodosInLocalStorage}/>\r\n                </div>\r\n              </div>\r\n            </div>\r\n          );\r\n    }\r\n}","import React from 'react';\r\nimport Card from './Card';\r\n\r\nexport default class Cards extends React.Component {\r\n    constructor(props){\r\n        super(props);\r\n        this.props = props;\r\n    }\r\n\r\n\r\n    render() {\r\n        let cards;\r\n        if (this.props.localStorageData) {\r\n            cards = this.props.localStorageData.map((card) => <Card key={card.cardId.toString()} \r\n                                                                    data={card.todos} \r\n                                                                    cardId={card.cardId} \r\n                                                                    cardName={card.cardName}\r\n                                                                    deleteCard={this.props.deleteCard}\r\n                                                                />);\r\n        }\r\n        \r\n        return (\r\n            <div>\r\n                {cards}\r\n            </div>\r\n        );\r\n        \r\n    }\r\n}","import React from 'react'\r\n\r\nexport default function Nav(props) {\r\n    return (\r\n        <div className='Actions'>\r\n            <button onClick={props.createCard} className='createList'>Создать список</button>\r\n        </div>\r\n    );\r\n}","import React from 'react';\r\nimport './App.css';\r\nimport Cards from './components/Cards'\r\nimport Actions from './components/Actions'\r\nclass App extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    let cards = JSON.parse(localStorage.getItem('Cards'));\r\n    this.state = { cards };\r\n\r\n    this.createCard = this.createCard.bind(this);\r\n    this.deleteCard = this.deleteCard.bind(this);\r\n  }\r\n\r\n  createCard() {\r\n    let updatedData;\r\n    if (this.state.cards) {\r\n      updatedData = this.state.cards;\r\n      updatedData.unshift({\r\n        cardId: Date.now(),\r\n        cardName: 'Новый список',\r\n        todos: [],\r\n      });\r\n    } else {\r\n      updatedData = [\r\n        {\r\n          cardId: Date.now(),\r\n          cardName: 'Новый список',\r\n          todos: [],\r\n        }\r\n      ];\r\n    }\r\n\r\n    this.setState({\r\n      cards: updatedData,\r\n    })\r\n\r\n    localStorage.setItem('Cards', JSON.stringify(updatedData));\r\n  }\r\n\r\n  deleteCard(cardId) {\r\n    let currentData = JSON.parse(localStorage.getItem('Cards'));\r\n      if (currentData) {\r\n        let updatedData = currentData.filter((card) => card.cardId !== cardId);\r\n\r\n        localStorage.setItem('Cards', JSON.stringify(updatedData));\r\n        this.setState({\r\n          cards: updatedData\r\n        });\r\n      }\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"App\">\r\n        <Actions createCard={this.createCard}/>\r\n        <Cards localStorageData={this.state.cards} deleteCard={this.deleteCard}/>\r\n      </div>\r\n    );\r\n  }\r\n  \r\n}\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}